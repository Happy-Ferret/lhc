= LHC TODO =

 * Documentation, and lots of it! (anybody)
 * Clean up warnings (anybody)
 * Instead of removing lhc-regress, perhaps generalize it into a compiler regression
   tool on its own and then use it.
 * Compilation pipeline is mostly pure, there are probably useful invariants
   to check with QuickCheck. (anybody)
 * Performance improvements (david h. & austin s.)
   * Faster compiles
   * Less memory
   * Better executables
 * Performance benchmarks (anybody)
   * Bring back the nobench results
   * Use criterion to benchmark things
     * Compile times
     * Executable runs
   * Compiler benchmarks/memory usage
 * FFI support (austin s./david h.)
 * IEEE floating point support (???)
 * Exceptions (???)
 * A faster core parser could make library installations faster.
   * The current parser uses Parsec. Using happy should be faster.

In the future (Austin's thoughts):

 * A less memory hungry HPT solver.
 * A copying/generational GC, rather than boehm's libgc
 * A simply typed variant of GRIN with a linter
   * John did this for JHC
   * Simply typed GRIN breaks some previously valid transformations,
     so we need to reimplement them (and some more)
 * extend the (tiny tiny tiny) runtime system to do:
   * profiling
   * exceptions?
 * replace the C code pretty printer with a library
   * i've been working on a library that can pretty print
     C code since I've needed it in the past. perhaps we could
     replace our current one with a library.

In the future (David's thoughts):

 * Work out how to implement the GRIN optimizations using Hoopl.
 * Missing/Interesting optimizations:
  * Expand wildcards after the HPT analysis is done.
  * Specialize functions by type. Right now we discard all type information
    immediately when we read external core files.
  * Store library code in an intermediary GRIN from.
   * Apply local optimizations to the stored library code.
